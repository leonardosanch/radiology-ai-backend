version: "3.8"

services:
  radiology-ai-backend:
    build: .
    container_name: radiology-ai-backend
    ports:
      - "8002:8002" # Mapear puerto 8002 del host al 8002 del contenedor
    environment:
      - HOST=0.0.0.0
      - PORT=8002
      - DEBUG=true
      # Variables de entorno para el usuario
      - PUID=1000
      - PGID=1000
    volumes:
      # Montar directorios para persistencia
      - ./uploads:/app/uploads
      - ./models:/app/models
      - ./logs:/app/logs
      - ./temp:/app/temp
      - ./cache:/app/cache
      # Montar el .env file
      - ./.env:/app/.env:ro
    networks:
      - radiology-network
    restart: unless-stopped
    # SOLUCIÓN: Ejecutar como el usuario actual del host
    user: "${UID:-1000}:${GID:-1000}"
    # Comando que crea directorios y asigna permisos antes de iniciar
    command: >
      sh -c "
        echo 'Configurando permisos...' &&
        mkdir -p /app/logs /app/models /app/uploads /app/temp /app/cache &&
        chmod -R 777 /app/logs /app/models /app/uploads /app/temp /app/cache &&
        echo 'Iniciando aplicación...' &&
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8002 --reload
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radiology-ai.rule=Host(`localhost`)"
      - "traefik.http.routers.radiology-ai.service=radiology-ai"
      - "traefik.http.services.radiology-ai.loadbalancer.server.port=8002"

  # Opcional: Agregar Redis para cache en el futuro
  redis:
    image: redis:7-alpine
    container_name: radiology-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - radiology-network
    restart: unless-stopped
    command: redis-server --appendonly yes

networks:
  radiology-network:
    driver: bridge

volumes:
  redis_data:
